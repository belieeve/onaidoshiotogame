{"version":3,"mappings":"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","names":["CalibrationScene","__publicField","Container","e","title","Text","back","Graphics","backT","mod","__vitePreload","n","apply","applyT","W","phase","r","g","click","start","interval","t","src","sr","len","b","d","i","now","nearest","best","c","diff","lagSec","lagMs","s","loadSettings","saveSettings"],"ignoreList":[],"sources":["../../src/ui/calibration/CalibrationScene.ts"],"sourcesContent":["import { Container, Graphics, Text } from 'pixi.js'\nimport type { Scene } from '../../engine/Scene'\nimport { loadSettings, saveSettings } from '../../utils/storage'\n\nexport class CalibrationScene implements Scene {\n  private stage = new Container()\n  app!: any\n  change!: (s: Scene) => void\n  private ctx = new (window.AudioContext || (window as any).webkitAudioContext)()\n  private clicks: number[] = [] // scheduled click times (ctx time)\n  private taps: number[] = [] // user tap times (ctx time)\n  private running = false\n  private info!: Text\n  private avgMs = 0\n\n  async init() {\n    this.app.stage.addChild(this.stage)\n    const title = new Text({ text: 'キャリブレーション', style: { fill: 0xffffff, fontSize: 28 } })\n    title.x = 24; title.y = 24; this.stage.addChild(title)\n    this.info = new Text({ text: '説明: クリック音に合わせて画面をタップ/Enter。8回以上で精度UP。', style: { fill: 0xccccff, fontSize: 16 } })\n    this.info.x = 24; this.info.y = 64; this.stage.addChild(this.info)\n\n    const back = new Graphics().roundRect(24, 100, 160, 44, 10).fill(0x44445a)\n    const backT = new Text({ text: '戻る', style: { fill: 0xffffff, fontSize: 16 } })\n    backT.x = 24 + 16; backT.y = 100 + 12\n    back.eventMode='static'; back.cursor='pointer'; back.on('pointertap', async () => {\n      const mod = await import('../SettingsScene')\n      this.change(new mod.SettingsScene())\n    })\n    this.stage.addChild(back, backT)\n\n    const apply = new Graphics().roundRect(200, 100, 200, 44, 10).fill(0x2b7a2b)\n    const applyT = new Text({ text: '推定を適用', style: { fill: 0xffffff, fontSize: 16 } })\n    applyT.x = 200 + 40; applyT.y = 100 + 12\n    apply.eventMode='static'; apply.cursor='pointer'; apply.on('pointertap', () => this.apply())\n    this.stage.addChild(apply, applyT)\n\n    // tap listeners\n    window.addEventListener('keydown', this.onKey)\n    this.stage.eventMode='static'; this.stage.on('pointerdown', this.onTap)\n\n    // start clicks\n    this.running = true\n    this.scheduleClicks()\n  }\n\n  update(): void {\n    if (!this.running) return\n    const W = this.app.renderer.width\n    const H = this.app.renderer.height\n    const t = this.ctx.currentTime\n    // simple visual metronome\n    const phase = (t % 0.6) / 0.6\n    const r = 20 + 10 * Math.sin(phase * Math.PI * 2)\n    const g = new Graphics().circle(W-60, 60, r).fill(0xff4fd8)\n    this.stage.addChild(g); queueMicrotask(()=>g.destroy())\n  }\n\n  dispose(): void {\n    this.running = false\n    window.removeEventListener('keydown', this.onKey)\n    this.stage.off('pointerdown', this.onTap)\n    this.stage.removeFromParent(); this.stage.destroy({ children: true })\n  }\n\n  private scheduleClicks(){\n    const click = this.makeClick()\n    const start = this.ctx.currentTime + 0.5\n    const interval = 0.6 // 100 BPM相当\n    for (let i=0;i<32;i++){\n      const t = start + i*interval\n      const src = this.ctx.createBufferSource()\n      src.buffer = click\n      src.connect(this.ctx.destination)\n      src.start(t)\n      this.clicks.push(t)\n    }\n  }\n\n  private makeClick(): AudioBuffer {\n    const sr = this.ctx.sampleRate\n    const len = Math.floor(sr * 0.05)\n    const b = this.ctx.createBuffer(1, len, sr)\n    const d = b.getChannelData(0)\n    for (let i=0;i<len;i++){\n      const t = i/sr\n      // short DC pulse envelope\n      d[i] = Math.exp(-50*t)\n    }\n    return b\n  }\n\n  private onKey = (e: KeyboardEvent) => {\n    if (e.key.toLowerCase() === 'enter' || e.key.toLowerCase() === ' ') this.captureTap()\n  }\n  private onTap = () => { this.captureTap() }\n\n  private captureTap(){\n    const now = this.ctx.currentTime\n    this.taps.push(now)\n    // nearest click\n    let nearest = this.clicks[0]\n    let best = Infinity\n    for (const c of this.clicks){\n      const diff = Math.abs(c - now)\n      if (diff < best){ best = diff; nearest = c }\n    }\n    const lagSec = now - nearest\n    const lagMs = Math.round(lagSec * 1000)\n    // simple running average\n    const n = this.taps.length\n    this.avgMs = Math.round(((this.avgMs * (n-1)) + lagMs) / n)\n    this.info.text = `サンプル: ${n}  平均ラグ: ${this.avgMs}ms  推奨オフセット: ${-this.avgMs}ms`\n  }\n\n  private apply(){\n    const s = loadSettings()\n    s.offsetMs = -this.avgMs\n    saveSettings(s)\n    import('../SettingsScene').then(mod => this.change(new mod.SettingsScene()))\n  }\n}\n"],"file":"assets/CalibrationScene-CyK2P5jR.js"}